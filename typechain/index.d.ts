/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface ACLContract extends Truffle.Contract<ACLInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ACLInstance>;
}

export interface AppProxyBaseContract
  extends Truffle.Contract<AppProxyBaseInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyBaseInstance>;
}

export interface AppProxyFactoryContract
  extends Truffle.Contract<AppProxyFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppProxyFactoryInstance>;
}

export interface AppProxyPinnedContract
  extends Truffle.Contract<AppProxyPinnedInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyPinnedInstance>;
}

export interface AppProxyUpgradeableContract
  extends Truffle.Contract<AppProxyUpgradeableInstance> {
  "new"(
    _kernel: string | BigNumber,
    _appId: string | BigNumber,
    _initializePayload: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AppProxyUpgradeableInstance>;
}

export interface AppStorageContract
  extends Truffle.Contract<AppStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AppStorageInstance>;
}

export interface AragonAppContract extends Truffle.Contract<AragonAppInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AragonAppInstance>;
}

export interface AutopetrifiedContract
  extends Truffle.Contract<AutopetrifiedInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AutopetrifiedInstance>;
}

export interface BaseEVMScriptExecutorContract
  extends Truffle.Contract<BaseEVMScriptExecutorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<BaseEVMScriptExecutorInstance>;
}

export interface CallsScriptContract
  extends Truffle.Contract<CallsScriptInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CallsScriptInstance>;
}

export interface CounterContract extends Truffle.Contract<CounterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CounterInstance>;
}

export interface DAOFactoryContract
  extends Truffle.Contract<DAOFactoryInstance> {
  "new"(
    _baseKernel: string | BigNumber,
    _baseACL: string | BigNumber,
    _regFactory: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DAOFactoryInstance>;
}

export interface DelegateProxyContract
  extends Truffle.Contract<DelegateProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DelegateProxyInstance>;
}

export interface DepositableDelegateProxyContract
  extends Truffle.Contract<DepositableDelegateProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DepositableDelegateProxyInstance>;
}

export interface DepositableStorageContract
  extends Truffle.Contract<DepositableStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DepositableStorageInstance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20Instance>;
}

export interface ERCProxyContract extends Truffle.Contract<ERCProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERCProxyInstance>;
}

export interface EVMScriptRegistryContract
  extends Truffle.Contract<EVMScriptRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EVMScriptRegistryInstance>;
}

export interface EVMScriptRegistryFactoryContract
  extends Truffle.Contract<EVMScriptRegistryFactoryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<EVMScriptRegistryFactoryInstance>;
}

export interface EVMScriptRunnerContract
  extends Truffle.Contract<EVMScriptRunnerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EVMScriptRunnerInstance>;
}

export interface IACLContract extends Truffle.Contract<IACLInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IACLInstance>;
}

export interface IACLOracleContract
  extends Truffle.Contract<IACLOracleInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IACLOracleInstance>;
}

export interface IEVMScriptExecutorContract
  extends Truffle.Contract<IEVMScriptExecutorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IEVMScriptExecutorInstance>;
}

export interface IEVMScriptRegistryContract
  extends Truffle.Contract<IEVMScriptRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IEVMScriptRegistryInstance>;
}

export interface IKernelContract extends Truffle.Contract<IKernelInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IKernelInstance>;
}

export interface IKernelEventsContract
  extends Truffle.Contract<IKernelEventsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IKernelEventsInstance>;
}

export interface InitializableContract
  extends Truffle.Contract<InitializableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<InitializableInstance>;
}

export interface IVaultRecoverableContract
  extends Truffle.Contract<IVaultRecoverableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVaultRecoverableInstance>;
}

export interface KernelContract extends Truffle.Contract<KernelInstance> {
  "new"(
    _shouldPetrify: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelInstance>;
}

export interface KernelProxyContract
  extends Truffle.Contract<KernelProxyInstance> {
  "new"(
    _kernelImpl: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<KernelProxyInstance>;
}

export interface KernelStorageContract
  extends Truffle.Contract<KernelStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<KernelStorageInstance>;
}

export interface PetrifiableContract
  extends Truffle.Contract<PetrifiableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PetrifiableInstance>;
}

export interface VaultRecoverableContract
  extends Truffle.Contract<VaultRecoverableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VaultRecoverableInstance>;
}

export interface ACLInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  createBurnedPermission: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnPermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  grantPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionParamsLength(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  evalParams(
    _paramsHash: string | BigNumber,
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  NO_PERMISSION(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CREATE_PERMISSIONS_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  grantPermissionP: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _params: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  revokePermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionParam(
    _entity: string | BigNumber,
    _app: string | BigNumber,
    _role: string | BigNumber,
    _index: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ANY_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removePermissionManager: {
    (
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPermissionManager: {
    (
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newManager: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getPermissionManager(
    _app: string | BigNumber,
    _role: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  createPermission: {
    (
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _entity: string | BigNumber,
      _app: string | BigNumber,
      _role: string | BigNumber,
      _manager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  EMPTY_PARAM_HASH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  BURN_ENTITY(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppProxyBaseInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppProxyFactoryInstance extends Truffle.ContractInstance {
  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface AppProxyPinnedInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppProxyUpgradeableInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AppStorageInstance extends Truffle.ContractInstance {
  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface AragonAppInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface AutopetrifiedInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface BaseEVMScriptExecutorInstance
  extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface CallsScriptInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  execScript: {
    (
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _script: string,
      arg1: string,
      _blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface CounterInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  decrement: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  value(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  safeFunction: {
    (
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  increment: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  DECREMENT_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DAOFactoryInstance extends Truffle.ContractInstance {
  baseACL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newDAO: {
    (
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _root: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  regFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  baseKernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DelegateProxyInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DepositableDelegateProxyInstance
  extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DepositableStorageInstance extends Truffle.ContractInstance {
  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface ERC20Instance extends Truffle.ContractInstance {
  approve: {
    (
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transferFrom: {
    (
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BigNumber,
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    _who: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transfer: {
    (
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BigNumber,
      _value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    _owner: string | BigNumber,
    _spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ERCProxyInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EVMScriptRegistryInstance extends Truffle.ContractInstance {
  getScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  REGISTRY_ADD_EXECUTOR_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  disableScriptExecutor: {
    (
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  addScriptExecutor: {
    (
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  canPerform(
    _sender: string | BigNumber,
    _role: string | BigNumber,
    _params: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  REGISTRY_MANAGER_ROLE(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  enableScriptExecutor: {
    (
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  executors(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean]>;
}

export interface EVMScriptRegistryFactoryInstance
  extends Truffle.ContractInstance {
  baseReg(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newEVMScriptRegistry: {
    (_dao: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _dao: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  baseCallScript(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface EVMScriptRunnerInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getEVMScriptExecutor(
    _script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  appId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getEVMScriptRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  kernel(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IACLInstance extends Truffle.ContractInstance {
  initialize: {
    (
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hasPermission(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IACLOracleInstance extends Truffle.ContractInstance {
  canPerform(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IEVMScriptExecutorInstance extends Truffle.ContractInstance {
  execScript: {
    (
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      script: string,
      input: string,
      blacklist: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executorType(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface IEVMScriptRegistryInstance extends Truffle.ContractInstance {
  getScriptExecutor(
    script: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  disableScriptExecutor: {
    (
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      executorId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addScriptExecutor: {
    (
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      executor: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IKernelInstance extends Truffle.ContractInstance {
  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferToVault: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      namespace: string | BigNumber,
      appId: string | BigNumber,
      app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    namespace: string | BigNumber,
    appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    who: string | BigNumber,
    where: string | BigNumber,
    what: string | BigNumber,
    how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface IKernelEventsInstance extends Truffle.ContractInstance {}

export interface InitializableInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface IVaultRecoverableInstance extends Truffle.ContractInstance {
  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferToVault: {
    (
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface KernelInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  KERNEL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  APP_ADDR_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      _initializePayload: string,
      _setDefault: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseAcl: string | BigNumber,
      _permissionsCreator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  CORE_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  setRecoveryVaultAppId: {
    (
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recoveryVaultAppId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_MANAGER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newPinnedAppInstance: {
    (
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _appId: string | BigNumber,
      _appBase: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setApp: {
    (
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _namespace: string | BigNumber,
      _appId: string | BigNumber,
      _app: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getApp(
    _namespace: string | BigNumber,
    _appId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  newAppProxyPinned: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      _initializePayload: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  APP_BASES_NAMESPACE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  acl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  newAppProxy: {
    (
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _kernel: string | BigNumber,
      _appId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  DEFAULT_ACL_APP_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hasPermission(
    _who: string | BigNumber,
    _where: string | BigNumber,
    _what: string | BigNumber,
    _how: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface KernelProxyInstance extends Truffle.ContractInstance {
  proxyType(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isDepositable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface KernelStorageInstance extends Truffle.ContractInstance {
  apps(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  recoveryVaultAppId(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface PetrifiableInstance extends Truffle.ContractInstance {
  hasInitialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getInitializationBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  isPetrified(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
}

export interface VaultRecoverableInstance extends Truffle.ContractInstance {
  getRecoveryVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowRecoverability(
    token: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transferToVault: {
    (
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
